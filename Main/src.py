# -*- coding: utf-8 -*-
"""LeNet-5_Keras_onMNIST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wkKHzkV79NU9wS4FYC2ZVRk-x8cANbZg
"""

from keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from keras.layers import *
from keras.models import *
import matplotlib.pyplot as plt

#Load_data
(x_train,y_train), (x_test,y_test) = mnist.load_data()

#Show Data
plt.matshow(x_train[2], cmap ="gray")
plt.show()

print(x_train.shape)

#Reshaping and typecasting
x_train = x_train.reshape((60000, 28, 28, 1))
x_train = x_train.astype('float32')/255

print(x_train.shape)

#One-Hot
y_train = to_categorical(y_train)

print(y_train.shape)
print(y_train[2])

#LeNet-5 Arch

model = Sequential()

#Layer 1
#Conv Layer 1
model.add(Conv2D(filters=6, kernel_size=5, strides=1, activation='sigmoid', input_shape = (28,28,1)))
#pooling layer 1
model.add(MaxPooling2D(pool_size=2, strides=2))

#Layer 2
#Conv Layer 2
model.add(Conv2D(filters=16, kernel_size=5, strides=1, activation='sigmoid', input_shape = (14,14,6)))
#pooling layer 2
model.add(MaxPooling2D(pool_size=2, strides=2))

#Flatten
model.add(Flatten())

#Layer 3
#Fully connected layer 1
model.add(Dense(units=120, activation='sigmoid'))

#Layer 4 
#Fully connected layer 2
model.add(Dense(units=84, activation='sigmoid'))

#Layer 5 
#Output Layer
model.add(Dense(units=10, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=8, batch_size=10, validation_split=0.2)

